
.. Documentation for the header file dolfin/function/MultiMeshFunction.h

.. _programmers_reference_cpp_function_multimeshfunction:

MultiMeshFunction.h
===================

.. note::
    
    The documentation on this page was automatically extracted from the
    DOLFIN C++ code and may need to be edited or expanded.
    

.. cpp:class:: MultiMeshFunction

    *Parent class(es)*
    
        * :cpp:class:`Variable`
        
    This class represents a function on a cut and composite finite
    element function space (MultiMesh) defined on one or more possibly
    intersecting meshes.


    .. cpp:function:: MultiMeshFunction()
    
        Constructor


    .. cpp:function:: explicit MultiMeshFunction(std::shared_ptr<const MultiMeshFunctionSpace> V)
    
        Create MultiMesh function on given MultiMesh function space
        
        *Arguments*
            V (:cpp:class:`MultiMeshFunctionSpace`)
                The MultiMesh function space.


    .. cpp:function:: MultiMeshFunction(std::shared_ptr<const MultiMeshFunctionSpace> V, std::shared_ptr<GenericVector> x)
    
        Create MultiMesh function on given MultiMesh function space with a given vector
        (shared data)
        
        *Warning: This constructor is intended for internal library use only*
        
        *Arguments*
            V (:cpp:class:`MultiMeshFunctionSpace`)
                The multimesh function space.
            x (:cpp:class:`GenericVector`)
                The vector.


    .. cpp:function:: void assign_part(std::size_t a, const Function& v)
    
        Assign Function to part of a mesh
        
        *Arguments*
            a (int)
                Part mesh assigned to
            V (:cpp:class:`Function`)
                The vector


    .. cpp:function:: std::shared_ptr<const Function> part(std::size_t i) const
    
        Return function (part) number i
        
        *Returns*
            :cpp:class:`Function`
                Function (part) number i


    .. cpp:function:: std::shared_ptr<const Function> part(std::size_t i, bool deepcopy) const
    
        Return a (deepcopy) function (part) number i
        
        *Returns*
            :cpp:class:`Function`
                Function (part) number i
                bool deepcopy flag


    .. cpp:function:: std::shared_ptr<GenericVector> vector()
    
        Return vector of expansion coefficients (non-const version)
        
        *Returns*
            :cpp:class:`GenericVector`
                The vector of expansion coefficients.


    .. cpp:function:: std::shared_ptr<const GenericVector> vector() const
    
        Return vector of expansion coefficients (const version)
        
        *Returns*
            :cpp:class:`GenericVector`
                The vector of expansion coefficients (const).


    .. cpp:function:: std::shared_ptr<const MultiMeshFunctionSpace> function_space() const
    
        Return shared pointer to multi mesh function space
        
        *Returns*
            :cpp:class:`MultiMeshFunctionSpace`
                Return the shared pointer.


    .. cpp:function:: void restrict(double* w, const FiniteElement& element, std::size_t part, const Cell& dolfin_cell, const double* coordinate_dofs, const ufc::cell& ufc_cell) const
    
        Restrict function to local cell in given part (compute expansion coefficients w)
        
        *Arguments*
            w (list of doubles)
                Expansion coefficients.
            element (:cpp:class:`FiniteElement`)
                The element.
            part (std::size_t)
                The mesh part
            dolfin_cell (:cpp:class:`Cell`)
                The cell.
            ufc_cell (ufc::cell).
                The ufc::cell.


    .. cpp:function:: void eval(Array<double>& values, const Array<double>& x, std::size_t part, const ufc::cell& cell) const
    
        Evaluate at given point in given cell in given part
        
        *Arguments*
            values (:cpp:class:`Array` <double>)
                The values at the point.
            x (:cpp:class:`Array` <double>)
                The coordinates of the point.
            cell (ufc::cell)
                The cell which contains the given point.


    .. cpp:function:: void eval(Array<double>& values, const Array<double>& x) const
    
        Evaluate at a given point


    .. cpp:function:: void restrict_as_ufc_function(double* w, const FiniteElement& element, std::size_t part, const Cell& dolfin_cell, const double* coordinate_dofs, const ufc::cell& ufc_cell) const
    
        Restrict as UFC function (by calling eval)


