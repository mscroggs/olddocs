
.. Documentation for the header file dolfin/geometry/BoundingBoxTree3D.h

.. _programmers_reference_cpp_geometry_boundingboxtree3d:

BoundingBoxTree3D.h
===================

.. note::
    
    The documentation on this page was automatically extracted from the
    DOLFIN C++ code and may need to be edited or expanded.
    

.. cpp:class:: BoundingBoxTree3D

    *Parent class(es)*
    
        * :cpp:class:`GenericBoundingBoxTree`
        
    Specialization of bounding box implementation to 3D


    .. cpp:function:: less_x_bbox(const std::vector<double>& bboxes)
    
        Constructor


    .. cpp:function:: bool operator()(unsigned int i, unsigned int j)
    
        Comparison operator


    .. cpp:function:: less_y_bbox(const std::vector<double>& bboxes)
    
        Constructor


    .. cpp:function:: bool operator()(unsigned int i, unsigned int j)
    
        Comparison operator


    .. cpp:function:: less_z_bbox(const std::vector<double>& bboxes)
    
        Constructor


    .. cpp:function:: bool operator()(unsigned int i, unsigned int j)
    
        Comparison operator


    .. cpp:function:: std::size_t gdim() const
    
        Return geometric dimension


    .. cpp:function:: const double* get_bbox_coordinates(unsigned int node) const
    
        Return bounding box coordinates for node


    .. cpp:function:: bool point_in_bbox(const double* x, const unsigned int node) const
    
        Check whether point (x) is in bounding box (node)


    .. cpp:function:: bool bbox_in_bbox(const double* a, unsigned int node) const
    
        Check whether bounding box (a) collides with bounding box (node)


    .. cpp:function:: double compute_squared_distance_bbox(const double* x, unsigned int node) const
    
        Compute squared distance between point and bounding box


    .. cpp:function:: double compute_squared_distance_point(const double* x, unsigned int node) const
    
        Compute squared distance between point and point


    .. cpp:function:: void compute_bbox_of_bboxes(double* bbox, std::size_t& axis, const std::vector<double>& leaf_bboxes, const std::vector<unsigned int>::iterator& begin, const std::vector<unsigned int>::iterator& end)
    
        Compute bounding box of bounding boxes


    .. cpp:function:: void compute_bbox_of_points(double* bbox, std::size_t& axis, const std::vector<Point>& points, const std::vector<unsigned int>::iterator& begin, const std::vector<unsigned int>::iterator& end)
    
        Compute bounding box of points


    .. cpp:function:: void sort_bboxes(std::size_t axis, const std::vector<double>& leaf_bboxes, const std::vector<unsigned int>::iterator& begin, const std::vector<unsigned int>::iterator& middle, const std::vector<unsigned int>::iterator& end)
    
        Sort leaf bounding boxes along given axis


